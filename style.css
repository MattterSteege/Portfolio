@view-transition {
    navigation: auto;
}

img {
    /* no select etc */
    user-select: none;
    pointer-events: none;
}

body {
    --scaler: 0.9; /* Scale the grid */
    --gap: 50px; /* Gap between the cells */
    --cells: 4; /* Amount of cells in the grid */
    --grid-size: min(calc(((90vh * var(--scaler)) / var(--cells))), calc(((90vw * var(--scaler)) / var(--cells)))); /* Size of the cells */
    --line-color: #666; /* Color of the walls */
    --floor-color: #a6a5a5; /* Color of the floor */
    --anim-speed: 0.5s; /* Animation speed */

    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    overflow: hidden;

    background-image: url("images/ProjectCubes/simple background.png");
    background-size: 12.5vw 12.5vw;
    image-rendering: pixelated;

    font-family: "Pixelify Sans", sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    font-style: normal;

    /*animation: background 25s infinite linear;*/

    opacity: 0;
    transition: opacity .5s;
}

@media screen and (max-width: 1000px)
{
    body {
        --scaler: 0.8; /* Scale the grid */
        --gap: 10px; /* Gap between the cells */
        --cells: 4; /* Amount of cells in the grid */
    }
}

@keyframes background {
    0% {
        background-position: 0 0;
    }
    100% {
        background-position: 12.5vw 12.5vw;
    }
}

.grid {
    position: fixed;
    width: min(calc((90vh * var(--scaler)) + var(--gap) * (var(--cells) - 1)), calc((90vw * var(--scaler)) + var(--gap) * (var(--cells) - 1)));
    height: min(calc((90vh * var(--scaler)) + var(--gap) * (var(--cells) - 1)), calc((90vw * var(--scaler)) + var(--gap) * (var(--cells) - 1)));
    transform: rotateX(60deg) rotateZ(45deg);
    transform-origin: 50% 50%;

    /* generate the isometric grid with gap */
    background-image:
            linear-gradient(0deg, var(--line-color) 1px, transparent 0), /* Horizontal line at the edge */
            linear-gradient(90deg, var(--line-color) 1px, transparent 0); /* Vertical line at the edge */

    background-size: calc(var(--grid-size) + var(--gap)) calc(var(--grid-size) + var(--gap)); /* Account for gap */
    background-color: var(--floor-color);
    background-position: 0 0, 0 0;
    border: 2px solid #000;
    translate: 0 -50%;
    top: 55%;
    transition: top var(--anim-speed);
    box-shadow: 50px 50px #fe9833;
    z-index: 10000;
}

.grid::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background-image:
            linear-gradient(0deg, var(--line-color) 1px, transparent 0), /* Horizontal line at the edge */
            linear-gradient(90deg, var(--line-color) 1px, transparent 0); /* Vertical line at the edge */

    background-size: calc(var(--grid-size) + var(--gap)) calc(var(--grid-size) + var(--gap)); /* Account for gap */
    background-position: calc(-1 * var(--gap)) calc(-1 * var(--gap)), calc(-1 * var(--gap)) calc(-1 * var(--gap));
    transform-origin: 50% 50%;
    border: 2px solid #000;
}

.grid .cell {
    width: calc(var(--grid-size));
    height: calc(var(--grid-size));
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    color: #fff;
    font-size: 24px;
    position: fixed;
}


.cells {
    /*width = 868 when not rotated*/
    /*height = 868 when not rotated*/
    /*width = 1227.54 when rotated*/
    /*height = 613.77 when rotated*/

    /*that means that the (90vw * var(--scaler)) has to be multiplied by 1.41421356237 to get the correct width*/
    /*that means that the (90vw * var(--scaler)) has to be multiplied by 0.70710678118 to get the correct height*/

    position: fixed;
    width: min(calc(((90vw* var(--scaler)) + var(--gap)*(var(--cells) - 1)) * 1.41421356237), calc(((90vh* var(--scaler)) + var(--gap)*(var(--cells) - 1))* 1.41421356237));
    height: min(calc(((90vw* var(--scaler)) + var(--gap)*(var(--cells) - 1)) * 0.70710678118), calc(((90vh* var(--scaler)) + var(--gap)*(var(--cells) - 1))* 0.70710678118));
    top: 55%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all var(--anim-speed);
    z-index: 100000;
}

.cells .cell {
    width: calc(var(--grid-size)* 1.41421356237);
    height: calc(var(--grid-size)* 0.70710678118 * 2);
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    color: #fff;
    font-size: 24px;
    translate: -50% -50%;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    transition: transform var(--anim-speed), background var(--anim-speed), opacity var(--anim-speed), width var(--anim-speed), height var(--anim-speed), top var(--anim-speed), left var(--anim-speed);
    padding: calc(var(--gap) / 2);
    position: fixed;
}

.hover-cover {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: radial-gradient(transparent, yellow);
    opacity: 0;
    transition: opacity var(--anim-speed);
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    z-index: -1;
}

.cells .cell:hover:not(.selected) .hover-cover {
    opacity: 50%;
}

.cells .cell:hover {
    transform: translateY(-50px); /* Simplified for testing */
}


.cells .cell img {
    width: 100%;
    height: 100%;
    image-rendering: pixelated;
    translate: 0% 0%;
}

.cells .cell.selected {
    z-index: 1000 !important;
    left: 50% !important;
    top: 50% !important;
    width: calc(40vh * 1.41421356237) !important;
    height: calc(40vh * 0.70710678118 * 2) !important;
    transform: translateY(-200%) translateX(25vw) !important;
    padding: 0;
    clip-path: none;
}

.cells .cell.unselected {
    opacity: 0 !important;
    pointer-events: none;
}

.warning-screen-to-small
{
    display: none;
}

.buttons {
    position: fixed;
    top: 0;
    left: 0;
    padding: 12px;
    z-index: 10000;
}

.buttons #backButton {
    width: 72px;
    height: 72px;
    background: transparent;
    border: transparent;
    cursor: pointer;
    transform: translateY(-128px);
    transition: transform var(--anim-speed);
    background-image: url("images/ProjectCubes/back.png");
    background-size: 72px 72px;
    image-rendering: pixelated;
}

.buttons #backButton:hover {
    transform: scale(1.1) !important;
}

.buttons #viewButton {
    width: 72px;
    height: 72px;
    background: transparent;
    border: transparent;
    cursor: pointer;
    transform: translateY(-128px);
    transition: transform var(--anim-speed);
    background-image: url("images/ProjectCubes/view.png");
    background-size: 72px 72px;
    image-rendering: pixelated;
}

.buttons #viewButton:hover {
    transform: scale(1.1) !important;
}

.ui {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    pointer-events: none;
    box-shadow: 0 0 2.5vw 2.5vw #fec473 inset;
    z-index: 100;
}

.ui::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: 0 0 0 0.5vw #fe9833 inset;
}

.project-header, .project-description {
    width: 50%;
    height: 5vw;
    display: flex;
    justify-content: center;
    align-items: center;
    transform: translateY(0);
    transition: transform var(--anim-speed), width var(--anim-speed);
}

.project-description {
    height: auto;
    font-size: 1.5vw;
    overflow: auto;
    opacity: 1;
    transition: transform var(--anim-speed), opacity var(--anim-speed), width var(--anim-speed);
}

.project-header.hidden {
    transform: translateY(-100px);
}

.project-description.hidden {
    opacity: 0;
}